version: "3.9"

services:

  database:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3366:3306"
    environment:
      MYSQL_DATABASE: sql11686549
      MYSQL_USER: sql11686549
      MYSQL_PASSWORD: e9JNxGrzxE
      MYSQL_ROOT_PASSWORD: pass
    networks:
      - internal

  rabbitmq-container:
    image: rabbitmq:3-management
    hostname: rabbitmq-container
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq-container" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      
      AMQP_URL: 'amqp://rabbitmq-container?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    networks:
      - internal

  checkout:
    image: checkout
    build:
      context: ./checkout
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      AMQP_URL: 'amqp://rabbitmq-container?connection_attempts=5&retry_delay=5'
      
    networks:
      - internal

  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      AMQP_URL: 'amqp://rabbitmq-container?connection_attempts=5&retry_delay=5'
            
    networks:
      - internal

  gateway:
    image: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      AMQP_URL: 'amqp://rabbitmq-container?connection_attempts=5&retry_delay=5'
      
    networks:
      - internal

  basket:
    image: basket
    build:
      context: ./basket
      dockerfile: Dockerfile

    ports:
      - "8084:8084"

    environment:
      AMQP_URL: 'amqp://rabbitmq-container?connection_attempts=5&retry_delay=5'
      
    networks:
      - internal

  product:
    container_name: product
    build:
      context: ./product
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - database
    
    volumes:
      - ./:/app/app
    links:
      - database

    environment:
      AMQP_URL: 'amqp://rabbitmq-container?connection_attempts=5&retry_delay=5'
      
    # Run this container on a private network for this application.
    # This is necessary for magic Docker DNS to work: other containers
    # also running on this network will see a host name "rabbitmq"
    # (the name of this section) and the internal port 5672, even though
    # that's not explicitly published above.
    networks:
      - internal


networks:
  internal:
    name: internal
